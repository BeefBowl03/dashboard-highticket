import React, { useState, useEffect } from 'react';
import { EmailTemplate as EmailTemplateType, EmailFormData, SUBJECT_LINE_OPTIONS } from '../types/email';
import { Copy, Check, Mail, MessageSquare, Eye, Download, ChevronDown, ChevronRight, Lightbulb } from 'lucide-react';

interface EmailTemplateProps {
  template: EmailTemplateType;
  formData: EmailFormData;
  onReset?: () => void;
  onChangeDetails?: () => void;
}

export default function EmailTemplate({ template, formData, onReset, onChangeDetails }: EmailTemplateProps) {
  const [copiedItem, setCopiedItem] = useState<string | null>(null);
  const [finalSubjectLine, setFinalSubjectLine] = useState<string>(template.subjectLine.text);

  // dropdown states
  const [showSubjectReasoning, setShowSubjectReasoning] = useState(false);
  const [showEmailReasoning, setShowEmailReasoning] = useState(false);
  const [showFirstFollowReasoning, setShowFirstFollowReasoning] = useState(false);
  const [showSecondFollowReasoning, setShowSecondFollowReasoning] = useState(false);

  useEffect(() => {
    if (!template.coreEmail) return;

    const email = template.coreEmail.toLowerCase();
    let chosen = template.subjectLine.text;

    if (/partnership|partner/.test(email)) {
      chosen = SUBJECT_LINE_OPTIONS.find(opt => opt.type === 'partnership')?.text || chosen;
    } else if (/collaborate|collaboration/.test(email)) {
      chosen = SUBJECT_LINE_OPTIONS.find(opt => opt.type === 'collaboration')?.text || chosen;
    } else if (/team|together/.test(email)) {
      chosen = SUBJECT_LINE_OPTIONS.find(opt => opt.type === 'teaming')?.text || chosen;
    }

    setFinalSubjectLine(chosen);
  }, [template.coreEmail, template.subjectLine.text]);

  const copyToClipboard = async (text: string, item: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedItem(item);
      setTimeout(() => setCopiedItem(null), 2000);
    } catch (err) {
      console.error('Failed to copy to clipboard');
    }
  };

  const formatEmailContent = (content: string) => {
    return content
      .replace(/\[STORE_NAME\]/g, formData.storeName)
      .replace(/\[NICHE\]/g, formData.niche)
      .replace(/\[TARGET_DEMOGRAPHIC\]/g, formData.targetDemographic)
      .replace(/\[CONTACT_FIRST_NAME\]/g, formData.contactFirstName)
      .replace(/\[SUPPLIER_NAME\]/g, formData.supplierName || 'your brand');
  };

  const fullEmail = formatEmailContent(template.coreEmail);

  const exportToTxt = () => {
    const exportContent = `SUBJECT: ${finalSubjectLine}

${fullEmail}

---

FIRST FOLLOW-UP:
${template.firstFollowUp}

---

SECOND FOLLOW-UP:
${template.secondFollowUp}

---

Generated by AI Cold Email Generator
${new Date().toLocaleDateString()}`;

    const blob = new Blob([exportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `cold-email-${formData.storeName.toLowerCase().replace(/\s+/g, '-')}-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const CopyButton = ({ text, item }: { text: string; item: string }) => (
    <button
      onClick={() => copyToClipboard(text, item)}
      className="inline-flex items-center px-3 py-1.5 text-sm bg-gray-800 text-white hover:bg-yellow-500 hover:text-gray-900 rounded-lg transition-colors"
      title={`Copy ${item}`}
    >
      {copiedItem === item ? (
        <Check className="w-4 h-4 text-green-400" />
      ) : (
        <Copy className="w-4 h-4 text-yellow-500" />
      )}
      <span className="ml-1.5">{copiedItem === item ? 'Copied!' : 'Copy'}</span>
    </button>
  );

  const Dropdown = ({
    isOpen,
    toggle,
    children,
  }: {
    isOpen: boolean;
    toggle: () => void;
    children: React.ReactNode;
  }) => (
    <div className="p-4 mt-4 bg-gray-700 rounded-lg border border-yellow-500/40">
      <button
        onClick={toggle}
        className="flex items-center justify-between w-full text-left font-semibold text-yellow-500 hover:text-white transition"
      >
        <div className="flex items-center gap-2">
          <Lightbulb className="w-5 h-5 text-yellow-500" />
          <span>WHY THIS WORKS</span>
        </div>
        {isOpen ? (
          <ChevronDown className="w-5 h-5 text-yellow-500" />
        ) : (
          <ChevronRight className="w-5 h-5 text-yellow-500" />
        )}
      </button>
      {isOpen && <div className="mt-3 text-gray-300">{children}</div>}
    </div>
  );

  return (
    <div className="space-y-6 text-white">
      {/* Header */}
      <div className="rounded-2xl p-6 bg-gray-800 border border-yellow-500/30">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-2xl font-bold text-yellow-500 flex items-center">
            <Mail className="w-6 h-6 mr-2 text-yellow-500" />
            Your Cold Email Copy
          </h2>
          <button
            onClick={exportToTxt}
            className="px-3 py-1.5 rounded-lg bg-yellow-500 text-gray-900 font-semibold hover:bg-yellow-400 transition"
          >
            <Download className="w-4 h-4 mr-2 inline" />
            Export
          </button>
        </div>
      </div>

      {/* Subject Line */}
      <div className="rounded-xl p-6 bg-gray-800 border border-yellow-500/30">
        <div className="flex items-center justify-between mb-3">
          <h3 className="text-lg font-semibold text-yellow-500 flex items-center">
            <Eye className="w-5 h-5 mr-2 text-yellow-500" />
            Subject Line
          </h3>
          <CopyButton text={finalSubjectLine} item="Subject Line" />
        </div>
        <div className="bg-gray-700 rounded-lg p-4 border border-yellow-500/20 mb-4">
          <p className="font-mono text-white">{finalSubjectLine}</p>
        </div>

        <Dropdown
          isOpen={showSubjectReasoning}
          toggle={() => setShowSubjectReasoning(!showSubjectReasoning)}
        >
          <ul className="list-disc list-inside space-y-1 ml-4 text-sm">
            {template.reasoning.subjectLine.map((reason, index) => (
              <li key={index}>{reason}</li>
            ))}
          </ul>
        </Dropdown>
      </div>

      {/* Main Email */}
      <div className="rounded-xl p-6 bg-gray-800 border border-yellow-500/30">
        <div className="flex items-center justify-between mb-3">
          <h3 className="text-lg font-semibold text-yellow-500 flex items-center">
            <Mail className="w-5 h-5 mr-2 text-yellow-500" />
            Main Email
          </h3>
          <CopyButton text={fullEmail} item="Main Email" />
        </div>
        <div className="bg-gray-700 rounded-lg p-6 border border-yellow-500/20 mb-4">
          <pre className="whitespace-pre-wrap font-sans text-gray-200 leading-relaxed">
            {fullEmail}
          </pre>
        </div>

        <Dropdown
          isOpen={showEmailReasoning}
          toggle={() => setShowEmailReasoning(!showEmailReasoning)}
        >
          <ul className="list-disc list-inside space-y-1 ml-4 text-sm">
            {template.reasoning.coreEmail.map((reason, index) => {
              if (reason.includes("Target audience alignment") && !formData.targetDemographic) {
                return null;
              }
              if (
                reason.includes("Personalized framing") &&
                !formData.nicheExperience &&
                !formData.whyNicheImportant
              ) {
                return null;
              }
              return <li key={index}>{reason}</li>;
            })}
          </ul>
        </Dropdown>
      </div>

      {/* Follow-ups */}
      <div className="space-y-6">
        {/* First Follow-up */}
        <div className="rounded-xl p-6 bg-gray-800 border border-yellow-500/30">
          <div className="flex items-center justify-between mb-3">
            <h3 className="text-lg font-semibold text-yellow-500 flex items-center">
              <MessageSquare className="w-5 h-5 mr-2 text-yellow-500" />
              First Follow-up
            </h3>
            <CopyButton text={template.firstFollowUp} item="First Follow-up" />
          </div>
          <div className="bg-gray-700 rounded-lg p-4 border border-yellow-500/20 mb-4">
            <p className="text-gray-200">{template.firstFollowUp}</p>
          </div>
          <p className="text-xs text-gray-400 mt-2">Send 2-3 business days after initial email</p>

          <Dropdown
            isOpen={showFirstFollowReasoning}
            toggle={() => setShowFirstFollowReasoning(!showFirstFollowReasoning)}
          >
            <ul className="list-disc list-inside space-y-1 ml-4 text-sm">
              {template.reasoning.followUps.first.map((reason, index) => (
                <li key={index}>
                  {reason.includes("Both maintain human")
                    ? reason.replace("Both maintain human", "This maintains human")
                    : reason}
                </li>
              ))}
            </ul>
          </Dropdown>
        </div>

        {/* Second Follow-up */}
        <div className="rounded-xl p-6 bg-gray-800 border border-yellow-500/30">
          <div className="flex items-center justify-between mb-3">
            <h3 className="text-lg font-semibold text-yellow-500 flex items-center">
              <MessageSquare className="w-5 h-5 mr-2 text-yellow-500" />
              Second Follow-up
            </h3>
            <CopyButton text={template.secondFollowUp} item="Second Follow-up" />
          </div>
          <div className="bg-gray-700 rounded-lg p-4 border border-yellow-500/20 mb-4">
            <p className="text-gray-200">{template.secondFollowUp}</p>
          </div>
          <p className="text-xs text-gray-400 mt-2">Send 2-3 business days after first follow-up</p>

          <Dropdown
            isOpen={showSecondFollowReasoning}
            toggle={() => setShowSecondFollowReasoning(!showSecondFollowReasoning)}
          >
            <ul className="list-disc list-inside space-y-1 ml-4 text-sm">
              {template.reasoning.followUps.second.map((reason, index) => (
                <li key={index}>
                  {reason.includes("Both maintain human")
                    ? reason.replace("Both maintain human", "This maintains human")
                    : reason}
                </li>
              ))}
            </ul>
          </Dropdown>
        </div>
      </div>
    </div>
  );
}
